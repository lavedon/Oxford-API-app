<SPAN style="FONT-WEIGHT: 700; FONT-STYLE: italic">The Memory Map Window <BR></SPAN><SPAN>The Memory Map window displays a summary listing of the memory blocks present in the program, as shown in Figure 5-26. </SPAN></P>
<P><SPAN>Note that what Ghidra terms </SPAN><SPAN style="FONT-STYLE: italic">memory blocks</SPAN><SPAN> are frequently called </SPAN><SPAN style="FONT-STYLE: italic">sections</SPAN><SPAN> when discussing the structure of binary files. Information presented in the window includes the memory block (section) name, start and end addresses, length, permission flags, block type, initialized flag, as well as a space for source filename and <BR>user comments. The start and end addresses represent the virtual address range to which the program sections will be mapped at runtime.</SPAN> <BR><SPAN style="FONT-STYLE: italic"></SPAN></P>
<P><SPAN style="FONT-STYLE: italic">Figure 5-26: Memory Map window</SPAN>&nbsp;<BR><SPAN>Double-clicking any start or end address in the window jumps the <BR>Listing window (and all other connected windows) to the specified address. <BR><BR>The Memory Map window toolbar provides options to add/delete blocks, move blocks, split/merge blocks, edit addresses, and set a new image base. </SPAN><BR></P>
<P><SPAN>These features are particularly useful when reverse engineering files with nonstandard formats, as the binary&#8217;s segment structure may not have been detected by the Ghidra loader. </SPAN></P>
<P><SPAN><BR>Command line counterparts to the Memory Map window include <BR>objdump (-h), readelf (-S), and dumpbin (/HEADERS).</SPAN> <SPAN></SPAN>